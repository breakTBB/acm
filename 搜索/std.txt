import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.StringTokenizer;

public class Main {
    public static void main(String[] args) {
        InputStream is = System.in;
        OutputStream os = System.out;
        InputReader in = new InputReader(is);
        PrintWriter out = new PrintWriter(os);

        Task1 solver = new Task1();

        String t = in.next();

        while (!t.equals("end")) {
            solver.solve(in, out, t);
            t = in.next();
        }
        out.close();
    }

    static class Task1 {
        private int[] row = new int[10];
        private int[] col = new int[10];
        private int[] cell = new int[10];
        private int[] ones = new int[1 << 9];
        private int[] hm = new int[1 << 9];
        private char[] board;

        public Task1() {
            for (int i = 0; i < (1 << 9); i++) {
                ones[i] = 0;
                for (int j = i; j != 0; j -= lowbit(j)) ones[i]++;
            }
            // diff
            for (int i = 0; i < 9; i++) hm[1 << i] = i + 1;
        }

        private int lowbit(int x) {
            return x & -x;
        }

        private void put(int x, int y, int k, int val) {
            row[x] ^= 1 << (val - 1);
            col[y] ^= 1 << (val - 1);
            cell[cal(x, y)] ^= 1 << (val - 1);
            board[k] = (char) ('0' + val);
        }
        private void del(int x, int y, int k, int val) {
            row[x] |= 1 << (val - 1);
            col[y] |= 1 << (val - 1);
            cell[cal(x, y)] |= 1 << (val - 1);
            board[k] = '.';
        }
        private int cal(int x, int y) {
            return x / 3 * 3 + y / 3;
        }

        private int un (int x, int y) {
            return row[x] & col[y] & cell[cal(x, y)];
        }

        
        private boolean dfs(int cnt) {
            if (cnt == 0) {
                return true;
            }
            int nx = 0, ny = 0, mn = 10;
            for (int i = 0, k = 0; i < 9; i++) {
                for (int j = 0; j < 9; j++, k++) {
                    if (board[k] != '.') continue;
                    int status = un(i, j);
                    if (status == 0) return false;
                    if (ones[status] < mn) {
                        nx = i;
                        ny = j;
                        mn = ones[status];
                    }
                }
            }
            int status = un(nx, ny);
            for (int i = status; i != 0; i -= lowbit(i)) {
                put(nx, ny, nx * 9 + ny, hm[lowbit(i)]);
                if (dfs(cnt - 1)) return true;
                del(nx, ny, nx * 9 + ny, hm[lowbit(i)]);
            }
            return false;
        }

        public int solve(InputReader in, PrintWriter out, String t) {
            board = t.toCharArray();
            for (int i = 0; i < 9; i++) {
                row[i] = col[i] = cell[i] = (1 << 9) - 1;
            }

            // 以个数为状态搜索
            int cnt = 0;
            for (int i = 0, k = 0; i < 9; i++) {
                for (int j = 0; j < 9; j++, k++) {
                    if (board[k] != '.') {
                        put(i, j, k, board[k] - '0');
                    } else {
                        cnt++;
                    }
                }
            }

            dfs(cnt);
            
            out.println(board);

            return 1;
        }
    }

    static class InputReader {
        public BufferedReader br;
        public StringTokenizer st;

        public InputReader(InputStream is) {
            br = new BufferedReader(new InputStreamReader(is));
            st = null;
        }

        public String next() {
            while(st == null || !st.hasMoreTokens()) {
                try {
                    st = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }
    }
}